// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"simple-douyin/cmd/user/kitex_gen/userproto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*userproto.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser":     kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"UpdateUser":     kitex.NewMethodInfo(updateUserHandler, newUpdateUserArgs, newUpdateUserResult, false),
		"GetUserById":    kitex.NewMethodInfo(getUserByIdHandler, newGetUserByIdArgs, newGetUserByIdResult, false),
		"GetUserByEmail": kitex.NewMethodInfo(getUserByEmailHandler, newGetUserByEmailArgs, newGetUserByEmailResult, false),
		"CheckPassword":  kitex.NewMethodInfo(checkPasswordHandler, newCheckPasswordArgs, newCheckPasswordResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userproto.CreateUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userproto.UserService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(userproto.UserService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *userproto.CreateUserReq
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(userproto.CreateUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *userproto.CreateUserReq

func (p *CreateUserArgs) GetReq() *userproto.CreateUserReq {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type CreateUserResult struct {
	Success *userproto.CreateUserResp
}

var CreateUserResult_Success_DEFAULT *userproto.CreateUserResp

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(userproto.CreateUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *userproto.CreateUserResp {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userproto.CreateUserResp)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userproto.UpdateUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userproto.UserService).UpdateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateUserArgs:
		success, err := handler.(userproto.UserService).UpdateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateUserArgs() interface{} {
	return &UpdateUserArgs{}
}

func newUpdateUserResult() interface{} {
	return &UpdateUserResult{}
}

type UpdateUserArgs struct {
	Req *userproto.UpdateUserReq
}

func (p *UpdateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateUserArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserArgs) Unmarshal(in []byte) error {
	msg := new(userproto.UpdateUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserArgs_Req_DEFAULT *userproto.UpdateUserReq

func (p *UpdateUserArgs) GetReq() *userproto.UpdateUserReq {
	if !p.IsSetReq() {
		return UpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

type UpdateUserResult struct {
	Success *userproto.UpdateUserResp
}

var UpdateUserResult_Success_DEFAULT *userproto.UpdateUserResp

func (p *UpdateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateUserResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserResult) Unmarshal(in []byte) error {
	msg := new(userproto.UpdateUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserResult) GetSuccess() *userproto.UpdateUserResp {
	if !p.IsSetSuccess() {
		return UpdateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*userproto.UpdateUserResp)
}

func (p *UpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userproto.GetUserByIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userproto.UserService).GetUserById(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserByIdArgs:
		success, err := handler.(userproto.UserService).GetUserById(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserByIdResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserByIdArgs() interface{} {
	return &GetUserByIdArgs{}
}

func newGetUserByIdResult() interface{} {
	return &GetUserByIdResult{}
}

type GetUserByIdArgs struct {
	Req *userproto.GetUserByIdReq
}

func (p *GetUserByIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserByIdArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserByIdArgs) Unmarshal(in []byte) error {
	msg := new(userproto.GetUserByIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserByIdArgs_Req_DEFAULT *userproto.GetUserByIdReq

func (p *GetUserByIdArgs) GetReq() *userproto.GetUserByIdReq {
	if !p.IsSetReq() {
		return GetUserByIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserByIdArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserByIdResult struct {
	Success *userproto.GetUserByIdResp
}

var GetUserByIdResult_Success_DEFAULT *userproto.GetUserByIdResp

func (p *GetUserByIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserByIdResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserByIdResult) Unmarshal(in []byte) error {
	msg := new(userproto.GetUserByIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserByIdResult) GetSuccess() *userproto.GetUserByIdResp {
	if !p.IsSetSuccess() {
		return GetUserByIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*userproto.GetUserByIdResp)
}

func (p *GetUserByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getUserByEmailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userproto.GetUserByEmailReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userproto.UserService).GetUserByEmail(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserByEmailArgs:
		success, err := handler.(userproto.UserService).GetUserByEmail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserByEmailResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserByEmailArgs() interface{} {
	return &GetUserByEmailArgs{}
}

func newGetUserByEmailResult() interface{} {
	return &GetUserByEmailResult{}
}

type GetUserByEmailArgs struct {
	Req *userproto.GetUserByEmailReq
}

func (p *GetUserByEmailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetUserByEmailArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserByEmailArgs) Unmarshal(in []byte) error {
	msg := new(userproto.GetUserByEmailReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserByEmailArgs_Req_DEFAULT *userproto.GetUserByEmailReq

func (p *GetUserByEmailArgs) GetReq() *userproto.GetUserByEmailReq {
	if !p.IsSetReq() {
		return GetUserByEmailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserByEmailArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetUserByEmailResult struct {
	Success *userproto.GetUserByEmailResp
}

var GetUserByEmailResult_Success_DEFAULT *userproto.GetUserByEmailResp

func (p *GetUserByEmailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetUserByEmailResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserByEmailResult) Unmarshal(in []byte) error {
	msg := new(userproto.GetUserByEmailResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserByEmailResult) GetSuccess() *userproto.GetUserByEmailResp {
	if !p.IsSetSuccess() {
		return GetUserByEmailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserByEmailResult) SetSuccess(x interface{}) {
	p.Success = x.(*userproto.GetUserByEmailResp)
}

func (p *GetUserByEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(userproto.CheckPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userproto.UserService).CheckPassword(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckPasswordArgs:
		success, err := handler.(userproto.UserService).CheckPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckPasswordResult)
		realResult.Success = success
	}
	return nil
}
func newCheckPasswordArgs() interface{} {
	return &CheckPasswordArgs{}
}

func newCheckPasswordResult() interface{} {
	return &CheckPasswordResult{}
}

type CheckPasswordArgs struct {
	Req *userproto.CheckPasswordReq
}

func (p *CheckPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckPasswordArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckPasswordArgs) Unmarshal(in []byte) error {
	msg := new(userproto.CheckPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckPasswordArgs_Req_DEFAULT *userproto.CheckPasswordReq

func (p *CheckPasswordArgs) GetReq() *userproto.CheckPasswordReq {
	if !p.IsSetReq() {
		return CheckPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckPasswordResult struct {
	Success *userproto.CheckPasswordResp
}

var CheckPasswordResult_Success_DEFAULT *userproto.CheckPasswordResp

func (p *CheckPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckPasswordResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckPasswordResult) Unmarshal(in []byte) error {
	msg := new(userproto.CheckPasswordResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckPasswordResult) GetSuccess() *userproto.CheckPasswordResp {
	if !p.IsSetSuccess() {
		return CheckPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*userproto.CheckPasswordResp)
}

func (p *CheckPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, Req *userproto.CreateUserReq) (r *userproto.CreateUserResp, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, Req *userproto.UpdateUserReq) (r *userproto.UpdateUserResp, err error) {
	var _args UpdateUserArgs
	_args.Req = Req
	var _result UpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserById(ctx context.Context, Req *userproto.GetUserByIdReq) (r *userproto.GetUserByIdResp, err error) {
	var _args GetUserByIdArgs
	_args.Req = Req
	var _result GetUserByIdResult
	if err = p.c.Call(ctx, "GetUserById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByEmail(ctx context.Context, Req *userproto.GetUserByEmailReq) (r *userproto.GetUserByEmailResp, err error) {
	var _args GetUserByEmailArgs
	_args.Req = Req
	var _result GetUserByEmailResult
	if err = p.c.Call(ctx, "GetUserByEmail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckPassword(ctx context.Context, Req *userproto.CheckPasswordReq) (r *userproto.CheckPasswordResp, err error) {
	var _args CheckPasswordArgs
	_args.Req = Req
	var _result CheckPasswordResult
	if err = p.c.Call(ctx, "CheckPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
