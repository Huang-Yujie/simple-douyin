// Code generated by Kitex v0.3.1. DO NOT EDIT.

package userservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	userproto2 "simple-douyin/kitex_gen/userproto"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateUser(ctx context.Context, Req *userproto2.CreateUserReq, callOptions ...callopt.Option) (r *userproto2.CreateUserResp, err error)
	GetUser(ctx context.Context, Req *userproto2.GetUserReq, callOptions ...callopt.Option) (r *userproto2.GetUserResp, err error)
	CheckUser(ctx context.Context, Req *userproto2.CheckUserReq, callOptions ...callopt.Option) (r *userproto2.CheckUserResp, err error)
	FollowUser(ctx context.Context, Req *userproto2.FollowUserReq, callOptions ...callopt.Option) (r *userproto2.FollowUserResp, err error)
	UnFollowUser(ctx context.Context, Req *userproto2.UnFollowUserReq, callOptions ...callopt.Option) (r *userproto2.UnFollowUserResp, err error)
	GetFollowList(ctx context.Context, Req *userproto2.GetFollowListReq, callOptions ...callopt.Option) (r *userproto2.GetFollowListResp, err error)
	GetFanList(ctx context.Context, Req *userproto2.GetFanListReq, callOptions ...callopt.Option) (r *userproto2.GetFanListResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) CreateUser(ctx context.Context, Req *userproto2.CreateUserReq, callOptions ...callopt.Option) (r *userproto2.CreateUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, Req)
}

func (p *kUserServiceClient) GetUser(ctx context.Context, Req *userproto2.GetUserReq, callOptions ...callopt.Option) (r *userproto2.GetUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUser(ctx, Req)
}

func (p *kUserServiceClient) CheckUser(ctx context.Context, Req *userproto2.CheckUserReq, callOptions ...callopt.Option) (r *userproto2.CheckUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckUser(ctx, Req)
}

func (p *kUserServiceClient) FollowUser(ctx context.Context, Req *userproto2.FollowUserReq, callOptions ...callopt.Option) (r *userproto2.FollowUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowUser(ctx, Req)
}

func (p *kUserServiceClient) UnFollowUser(ctx context.Context, Req *userproto2.UnFollowUserReq, callOptions ...callopt.Option) (r *userproto2.UnFollowUserResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UnFollowUser(ctx, Req)
}

func (p *kUserServiceClient) GetFollowList(ctx context.Context, Req *userproto2.GetFollowListReq, callOptions ...callopt.Option) (r *userproto2.GetFollowListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowList(ctx, Req)
}

func (p *kUserServiceClient) GetFanList(ctx context.Context, Req *userproto2.GetFanListReq, callOptions ...callopt.Option) (r *userproto2.GetFanListResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFanList(ctx, Req)
}
